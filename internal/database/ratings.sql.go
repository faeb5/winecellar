// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: ratings.sql

package database

import (
	"context"
)

const createRating = `-- name: CreateRating :one
INSERT INTO ratings (
    id,
    wine_id,
    user_id,
    rating
) VALUES (?, ?, ?, ?)
RETURNING id, wine_id, user_id, rating, created_at, updated_at
`

type CreateRatingParams struct {
	ID     string
	WineID string
	UserID string
	Rating string
}

func (q *Queries) CreateRating(ctx context.Context, arg CreateRatingParams) (Rating, error) {
	row := q.db.QueryRowContext(ctx, createRating,
		arg.ID,
		arg.WineID,
		arg.UserID,
		arg.Rating,
	)
	var i Rating
	err := row.Scan(
		&i.ID,
		&i.WineID,
		&i.UserID,
		&i.Rating,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllRatings = `-- name: DeleteAllRatings :exec
DELETE FROM ratings
`

func (q *Queries) DeleteAllRatings(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllRatings)
	return err
}

const deleteRatingByID = `-- name: DeleteRatingByID :exec
DELETE FROM ratings
WHERE id = ?
`

func (q *Queries) DeleteRatingByID(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteRatingByID, id)
	return err
}

const getAllRatings = `-- name: GetAllRatings :many
SELECT id, wine_id, user_id, rating, created_at, updated_at
FROM ratings
`

func (q *Queries) GetAllRatings(ctx context.Context) ([]Rating, error) {
	rows, err := q.db.QueryContext(ctx, getAllRatings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Rating
	for rows.Next() {
		var i Rating
		if err := rows.Scan(
			&i.ID,
			&i.WineID,
			&i.UserID,
			&i.Rating,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRatingByID = `-- name: GetRatingByID :one
SELECT id, wine_id, user_id, rating, created_at, updated_at
FROM ratings
WHERE ID = ?
`

func (q *Queries) GetRatingByID(ctx context.Context, id string) (Rating, error) {
	row := q.db.QueryRowContext(ctx, getRatingByID, id)
	var i Rating
	err := row.Scan(
		&i.ID,
		&i.WineID,
		&i.UserID,
		&i.Rating,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateRatingByID = `-- name: UpdateRatingByID :one
UPDATE ratings
SET
    rating = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE ID = ?
RETURNING id, wine_id, user_id, rating, created_at, updated_at
`

type UpdateRatingByIDParams struct {
	Rating string
	ID     string
}

func (q *Queries) UpdateRatingByID(ctx context.Context, arg UpdateRatingByIDParams) (Rating, error) {
	row := q.db.QueryRowContext(ctx, updateRatingByID, arg.Rating, arg.ID)
	var i Rating
	err := row.Scan(
		&i.ID,
		&i.WineID,
		&i.UserID,
		&i.Rating,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
