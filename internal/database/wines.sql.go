// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: wines.sql

package database

import (
	"context"
)

const createWine = `-- name: CreateWine :one
INSERT INTO wines (
    id,
    name,
    color,
    producer,
    country,
    vintage,
    created_by
) VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, color, name, producer, country, vintage, created_by, created_at, updated_at
`

type CreateWineParams struct {
	ID        string
	Name      string
	Color     string
	Producer  string
	Country   string
	Vintage   int64
	CreatedBy string
}

func (q *Queries) CreateWine(ctx context.Context, arg CreateWineParams) (Wine, error) {
	row := q.db.QueryRowContext(ctx, createWine,
		arg.ID,
		arg.Name,
		arg.Color,
		arg.Producer,
		arg.Country,
		arg.Vintage,
		arg.CreatedBy,
	)
	var i Wine
	err := row.Scan(
		&i.ID,
		&i.Color,
		&i.Name,
		&i.Producer,
		&i.Country,
		&i.Vintage,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllWines = `-- name: DeleteAllWines :exec
DELETE FROM wines
`

func (q *Queries) DeleteAllWines(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllWines)
	return err
}

const deleteWine = `-- name: DeleteWine :exec
DELETE FROM wines WHERE id = ?
`

func (q *Queries) DeleteWine(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteWine, id)
	return err
}

const getAllWines = `-- name: GetAllWines :many
SELECT id, color, name, producer, country, vintage, created_by, created_at, updated_at
FROM wines
`

func (q *Queries) GetAllWines(ctx context.Context) ([]Wine, error) {
	rows, err := q.db.QueryContext(ctx, getAllWines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wine
	for rows.Next() {
		var i Wine
		if err := rows.Scan(
			&i.ID,
			&i.Color,
			&i.Name,
			&i.Producer,
			&i.Country,
			&i.Vintage,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWineByID = `-- name: GetWineByID :one
SELECT id, color, name, producer, country, vintage, created_by, created_at, updated_at
FROM wines
WHERE id = ?
`

func (q *Queries) GetWineByID(ctx context.Context, id string) (Wine, error) {
	row := q.db.QueryRowContext(ctx, getWineByID, id)
	var i Wine
	err := row.Scan(
		&i.ID,
		&i.Color,
		&i.Name,
		&i.Producer,
		&i.Country,
		&i.Vintage,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWineByProducerAndNameAndVintage = `-- name: GetWineByProducerAndNameAndVintage :one
SELECT id, color, name, producer, country, vintage, created_by, created_at, updated_at
FROM wines
WHERE producer = ?
    AND name = ?
    AND vintage = ?
`

type GetWineByProducerAndNameAndVintageParams struct {
	Producer string
	Name     string
	Vintage  int64
}

func (q *Queries) GetWineByProducerAndNameAndVintage(ctx context.Context, arg GetWineByProducerAndNameAndVintageParams) (Wine, error) {
	row := q.db.QueryRowContext(ctx, getWineByProducerAndNameAndVintage, arg.Producer, arg.Name, arg.Vintage)
	var i Wine
	err := row.Scan(
		&i.ID,
		&i.Color,
		&i.Name,
		&i.Producer,
		&i.Country,
		&i.Vintage,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateWineByID = `-- name: UpdateWineByID :one
UPDATE wines SET
    color = ?,
    name = ?,
    producer = ?,
    country = ?,
    vintage = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, color, name, producer, country, vintage, created_by, created_at, updated_at
`

type UpdateWineByIDParams struct {
	Color    string
	Name     string
	Producer string
	Country  string
	Vintage  int64
	ID       string
}

func (q *Queries) UpdateWineByID(ctx context.Context, arg UpdateWineByIDParams) (Wine, error) {
	row := q.db.QueryRowContext(ctx, updateWineByID,
		arg.Color,
		arg.Name,
		arg.Producer,
		arg.Country,
		arg.Vintage,
		arg.ID,
	)
	var i Wine
	err := row.Scan(
		&i.ID,
		&i.Color,
		&i.Name,
		&i.Producer,
		&i.Country,
		&i.Vintage,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
